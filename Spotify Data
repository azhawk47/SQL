# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Finally, I sorted and looked at the datat using some CASE Queries.

SELECT track_name, popularity,
    CASE
        WHEN popularity > 90 THEN "Very Popular"
        WHEN popularity > 85 THEN "Popular"
        WHEN popularity > 80 THEN "Average"
        ELSE "Below Average"
    END as "Ranking"
FROM BIT_DB.Spotifydata
Order by popularity DESC

SELECT id, artist_name, track_name,
    CASE 
        WHEN loudness > -4 THEN "Soft"
        WHEN loudness > -6 THEN "Medium"
        WHEN loudness > -8 THEN "Loud"
        ELSE "Obscene"
    END as "Volume"
FROM BIT_DB.Spotifydata

SELECT id, artist_name, track_name,
    CASE 
        WHEN duration_ms < 160000 THEN "Short"
        WHEN duration_ms < 200000 THEN "Medium"
        WHEN duration_ms < 250000 THEN "Long"
        ELSE "Very Long"
    END as "Length",
    CASE 
        WHEN loudness > -4 THEN "Soft"
        WHEN loudness > -6 THEN "Medium"
        WHEN loudness > -8 THEN "Loud"
        ELSE "Obscene"
    END as "Volume"
FROM BIT_DB.Spotifydata
WHERE Volume IN ("Loud", "Obscene")
ORDER BY duration_ms
